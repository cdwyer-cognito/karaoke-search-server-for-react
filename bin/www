#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('karaoke-server:server');
const http = require('http');

const ipConfigData = require('../src/ipConfigData');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Console log ip info
 */
const addresses = ipConfigData();
console.log("\n== Server Started On ===============================");

let nameMaxLength = 0;
let aliasMaxLength = 0;
let addressMaxLength = 0;

// calculate output padding, make it look pretty!
for ( let data of addresses ) {
  if ( data.name.length > nameMaxLength ) {
    nameMaxLength = data.name.length;
  }

  if ( data.alias.length > aliasMaxLength ) {
    aliasMaxLength = data.alias.length;
  }

  if ( data.address.length > addressMaxLength ) {
    addressMaxLength = data.address.length;
  }
}

// add the port length, seperation character and whitespace. 
addressMaxLength += port.toString().length + 3;

for ( let data of addresses ) {
  //{ name: 'xxxxxxx', alias: 'x', address: 'xxx.xxx.xxx.xxx' }
  let name = " " + data.name;
  let alias = " " + data.alias;
  let address = " " + data.address + ":" + port;
  console.log( "|" + name.padEnd( nameMaxLength + 2 ) + "|" + alias.padEnd( aliasMaxLength + 2 ) + "|" + address.padEnd( addressMaxLength ) + "|");
};